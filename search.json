[{"path":"https://worldbank.github.io/rsocialwatcher/articles/create_facebook_credentials.html","id":"set-up-app","dir":"Articles","previous_headings":"","what":"Set up app","title":"Create Facebook Credentials: Token, Version, & Creation Act","text":"Register Meta Developer Go https://developers.facebook.com/ click Apps Click Create App (green button) Click Click Business, Next Create name App, click Create App Add products app page, click Set Marketing API","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/create_facebook_credentials.html","id":"get-token","dir":"Articles","previous_headings":"","what":"Get token","title":"Create Facebook Credentials: Token, Version, & Creation Act","text":"Click Tools, appears left hand side Marketing API Select Token Permissions, click boxes next ads_management ads_read Click Get Token; token appear gray, long string starting something like EEAKW...","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/create_facebook_credentials.html","id":"get-version","dir":"Articles","previous_headings":"","what":"Get version","title":"Create Facebook Credentials: Token, Version, & Creation Act","text":"App Settings, click Advanced; version show page—example, \"v18.0\"","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/create_facebook_credentials.html","id":"get-creation-act","dir":"Articles","previous_headings":"","what":"Get creation act","title":"Create Facebook Credentials: Token, Version, & Creation Act","text":"Go https://www.facebook.com/business/ Click Create ad creation act appear URL: https://adsmanager.facebook.com/adsmanager/onboarding?act=[CREATION ACT NUMBER ]&breakdown_regrouping=1","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/example-pop-gdp-gender.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Example: Facebook Usage, Population Online, GDP, & Gender in Africa","text":"load relevant packages define Facebook keys.","code":"## Load packages library(rsocialwatcher) library(dplyr) library(tidyr) library(ggplot2) library(WDI) library(janitor) library(ggpubr) library(knitr) library(kableExtra)  ## Set Facebook Keys TOKEN        <- \"TOKEN-HERE\" CREATION_ACT <- \"CREATION-ACT-HERE\" VERSION      <- \"VERSION-HERE\""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/example-pop-gdp-gender.html","id":"query-data-from-wdi","dir":"Articles","previous_headings":"","what":"Query data from WDI","title":"Example: Facebook Usage, Population Online, GDP, & Gender in Africa","text":"query data World Development Indicators (WDI). country, query: Total population (SP.POP.TOTL) Male population (SP.POP.TOTL.MA.ZS) Female population (SP.POP.TOTL.FE.ZS) GDP per capita (NY.GDP.PCAP.CD) Individuals using Internet, % population (.NET.USER.ZS)","code":"wdi_df <- WDI(country = \"all\",               indicator = c(\"SP.POP.TOTL\",                             \"SP.POP.TOTL.MA.ZS\",                             \"SP.POP.TOTL.FE.ZS\",                             \"NY.GDP.PCAP.CD\",                             \"IT.NET.USER.ZS\"),               start = 2021,               end = 2021,               extra = T)  wdi_df <- wdi_df %>%   filter(region == \"Sub-Saharan Africa\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/example-pop-gdp-gender.html","id":"query-data-from-facebook","dir":"Articles","previous_headings":"","what":"Query data from Facebook","title":"Example: Facebook Usage, Population Online, GDP, & Gender in Africa","text":"separately query number male female monthly active users Facebook country.","code":"fb_df <- query_fb_marketing_api(   location_unit_type = \"countries\",   location_keys      = map_param_vec(wdi_df$iso2c),   gender             = map_param(1, 2),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN)"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/example-pop-gdp-gender.html","id":"cleanup-data","dir":"Articles","previous_headings":"","what":"Cleanup data","title":"Example: Facebook Usage, Population Online, GDP, & Gender in Africa","text":"merge together WDI Facebook datasets queried clean-dataset.","code":"fb_clean_df <- fb_df %>%   rename(iso2c = location_keys) %>%   mutate(gender = case_when(     gender == \"1\" ~ \"fb_male\",     gender == \"2\" ~ \"fb_female\"   )) %>%   pivot_wider(id_cols = c(iso2c),               names_from = gender,               values_from = estimate_mau_upper_bound) %>%   left_join(wdi_df, by = \"iso2c\") %>%   clean_names() %>%   mutate(fb_total = fb_female + fb_male,          fb_per_female = fb_female/fb_total*100,          wdi_per_female = sp_pop_totl_fe_zs,          per_fb_pop = fb_total/sp_pop_totl*100)   fb_clean_df %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\",              height = \"300px\")"},{"path":[]},{"path":"https://worldbank.github.io/rsocialwatcher/articles/example-pop-gdp-gender.html","id":"setup-1","dir":"Articles","previous_headings":"Analysis","what":"Setup","title":"Example: Facebook Usage, Population Online, GDP, & Gender in Africa","text":"create theme use across figures.","code":"## Make theme for figures p_theme <- theme(plot.title = element_text(face = \"bold\", size = 10),                  plot.subtitle = element_text(face = \"italic\", size = 10),                  axis.text = element_text(color = \"black\"),                  axis.title = element_text(size = 10))"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/example-pop-gdp-gender.html","id":"facebook-usage-internet-connectivity-and-gdp","dir":"Articles","previous_headings":"Analysis","what":"Facebook Usage, Internet Connectivity, and GDP","title":"Example: Facebook Usage, Population Online, GDP, & Gender in Africa","text":"create figures show distribution percent population Facebook correlation indicator percent population online GDP measured WDI. Panel shows notable variation percent population Facebook—values range 0% 75%. percent population online per capita GDP appear positively correlated percent population Facebook.","code":"p_1a <- fb_clean_df %>%   ggplot() +   geom_histogram(aes(x = per_fb_pop),                  fill = \"#4267B2\",                  color = \"black\") +   labs(x = \"% population on Facebook\",        y = \"N countries\",        title = \"A. % population on Facebook\\nacross countries\") +   theme_classic2() +   p_theme  p_1b <- fb_clean_df %>%   ggplot() +   geom_point(aes(x = per_fb_pop,                  y = it_net_user_zs),              fill = \"#4267B2\",              pch = 21) +   labs(x = \"% population on Facebook\",        y = \"% population using internet\",        title = \"B. Internet connectivity vs\\n% population on Facebook\") +   xlim(0, 100) +   ylim(0, 100) +   theme_classic2() +   p_theme   p_1c <- fb_clean_df %>%   ggplot() +   geom_point(aes(x = per_fb_pop,                  y = ny_gdp_pcap_cd),              fill = \"#4267B2\",              pch = 21) +   labs(x = \"% population on Facebook\",        y = \"GDP per capita\",        title = \"C. Per capita GDP vs\\n% population on Facebook\") +   theme_classic2() +   p_theme  ggarrange(p_1a, p_1b, p_1c, nrow = 1)"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/example-pop-gdp-gender.html","id":"digital-gender-divide","dir":"Articles","previous_headings":"Analysis","what":"Digital Gender Divide","title":"Example: Facebook Usage, Population Online, GDP, & Gender in Africa","text":"examine variation percent Facebook users female across countries. Panel shows notable variation percent female Facebook users across countries, ranging 20 50%—, expected, percent female population measured WDI 50% countries.","code":"p_2a <- fb_clean_df %>%   ggplot() +   geom_point(aes(x = fb_per_female,                  y = wdi_per_female),              pch = 21,              size = 2,              fill = \"red\") +   xlim(20, 55) +   ylim(20, 55) +    theme_classic2() +   p_theme +   labs(x = \"% of Facebook users that are female\",        y = \"% females in population (WDI)\",        title = \"A. % females in population (WDI) vs\\n% of Facebook users that are female\")  p_2b <- fb_clean_df %>%   mutate(income = income %>%            factor(levels = c(\"Low income\",                              \"Lower middle income\",                              \"Upper middle income\",                              \"High income\"))) %>%   ggplot(aes(x = fb_per_female,              y = income)) +   geom_boxplot(color = \"gray50\",                outlier.size = 0) +   geom_jitter(width = 0,               height = 0.1,               pch = 21,               size = 2,               fill = \"red\") +   labs(x = \"% of Facebook users that are female\",        y = NULL,        title = \"B. Income vs. % of Facebook users\\nthat are female\") +    theme_classic2() +    scale_x_continuous(breaks = seq(0, 60, 20),                      limits = c(0, 60)) +   p_theme  ggarrange(p_2a, p_2b, nrow = 1, widths = c(0.45, 0.55))"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"rsocialwatcher: Usage Examples","text":"Setup User Type IDs Location Key Location Key Coordinates/Geometries Get coordinates/geometries location keys Radius around lat/lon Country Groups Country Region Large Geographic Area Medium Geographic Area Small Geographic Area City Subcity Neighborhood Zip Code Geo Market (U.S. Designated Market Areas) Electoral Districts Using one parameter ID per parameter type Within parameter types Across parameter types: Flexible Targetting Excluding Categories Simple Examples /Conditions","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"rsocialwatcher: Usage Examples","text":"First, load relevant packages create variables Facebook API keys. rsocialwatcher package provides two functions: get_fb_parameter_ids: obtain IDs targeting users different characteristics, including different types location. query_fb_marketing_api: Query daily monthly active users, querying users specific locations specific types.","code":"## Load packages library(rsocialwatcher) library(tidyverse) library(dplyr) library(lubridate) library(jsonlite) library(httr) library(stringr) library(knitr) library(kableExtra) library(leaflet) library(sf)  ## Set Facebook Keys TOKEN        <- \"TOKEN-HERE\" CREATION_ACT <- \"CREATION-ACT-HERE\" VERSION      <- \"VERSION-HERE\""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"querying-parameter-ids","dir":"Articles","previous_headings":"","what":"Querying Parameter IDs","title":"rsocialwatcher: Usage Examples","text":"get_fb_parameter_ids function facilitates querying IDs target specific types users (e.g., users specific interests) target users specific locations (eg, countries, cities, etc).","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"user-type-ids","dir":"Articles","previous_headings":"Querying Parameter IDs","what":"User Type IDs","title":"rsocialwatcher: Usage Examples","text":"Targeting specific types users can done along number categories, including users’ interests, behaviors, job, etc. Using get_fb_parameter_ids function, type parameter used query IDs different types categories. type parameter allows following inputs: behaviors demographics interests income industries life_events family_statuses locales work_positions work_employers education_statuses relationship_statuses education_majors education_schools IDs can used query_fb_marketing_api function, queries daily monthly active Facebook users. type input, parameter query_fb_marketing_api function include ID specific type. example, query_fb_marketing_api parameter behaviors put behavior IDs.","code":"behaviors_df <- get_fb_parameter_ids(type    = \"behaviors\",                                      version = VERSION,                                       token   = TOKEN)  behaviors_df %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\",              height = \"300px\") interests_df <- get_fb_parameter_ids(type    = \"interests\",                                      version = VERSION,                                       token   = TOKEN)  interests_df %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\",              height = \"300px\") job_titles_df <- get_fb_parameter_ids(type    = \"work_positions\",                                       version = VERSION,                                        token   = TOKEN,                                       q = \"data\")  job_titles_df %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\",              height = \"300px\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"location-key","dir":"Articles","previous_headings":"Querying Parameter IDs","what":"Location Key","title":"rsocialwatcher: Usage Examples","text":"Users can targeted different types locations, including users within country, region (e.g., US state), city, neighborhood, etc. get_fb_parameter_ids used obtain location key different places. type parameter used define type location (e.g., \"country\", \"region\", etc.). addition type, country_code, region_id, key q parameters can used refine searchers locations. Providing input country_code, region_id, key (e.g., city key), search locations within larger locations. Providing input q parameter limits search name. smaller geographic regions, input q required.","code":"country_group_df <- get_fb_parameter_ids(type    = \"country_group\",                                          version = VERSION,                                           token   = TOKEN)  country_df <- get_fb_parameter_ids(type    = \"country\",                                    version = VERSION,                                     token   = TOKEN)  us_states_df <- get_fb_parameter_ids(type    = \"region\",                                      version = VERSION,                                       token   = TOKEN,                                      country_code = \"US\")  ny_key <- us_states_df %>% filter(name == \"New York\") %>% pull(key)  ny_cities_df <- get_fb_parameter_ids(type    = \"city\",                                      version = VERSION,                                       token   = TOKEN,                                      region_id = ny_key,                                      q = \"New York\")  ny_cities_df %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\",              height = \"300px\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"location-key-with-coordinatesgeometries","dir":"Articles","previous_headings":"Querying Parameter IDs","what":"Location Key with Coordinates/Geometries","title":"rsocialwatcher: Usage Examples","text":"querying locations using get_fb_parameter_ids, setting add_location_coords TRUE adds coordinates , available, geometries.","code":"ny_cities_coords_df <- get_fb_parameter_ids(type    = \"city\",                                             version = VERSION,                                              token   = TOKEN,                                             region_id = ny_key,                                             q = \"New York\",                                             add_location_coords = T)  leaflet() %>%   addTiles() %>%   addCircles(data = ny_cities_coords_df,               popup = ~name)"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"get-coordinatesgeometries-for-location-keys","dir":"Articles","previous_headings":"","what":"Get coordinates/geometries for location keys","title":"rsocialwatcher: Usage Examples","text":"show , using get_fb_parameter_ids, coordinates/geometries locations can added setting add_location_coords TRUE. However, coordinates/geometries can also queried using location keys. Retrieving locations/coordinates many locations can take long time. Consequently, may want (1) use get_fb_parameter_ids obtain location keys, (2) filter keys relevant keys, (3) query coordinates/geometries relevant locations. valid location keys, function return coordinates (latitude longitude). available, function also return geometry. show example obtaining geometries Washington, DC zip codes","code":"## All Washington, DC zip codes start with 20 zip_df <- get_fb_parameter_ids(type = \"zip\",                                 q = \"20\",                                 country_code = \"US\",                                version = VERSION,                                 token = TOKEN)  zip_dc_df <- zip_df %>%   filter(region == \"Washington, District of Columbia\")  zip_dc_sf <- get_location_coords(location_unit_type = \"zip\",                                  location_keys = zip_dc_df$key,                                  version = VERSION,                                  token = TOKEN)  leaflet() %>%   addTiles() %>%   addPolygons(data = zip_dc_sf,               popup = ~name)"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"querying-data","dir":"Articles","previous_headings":"","what":"Querying Data","title":"rsocialwatcher: Usage Examples","text":"query_fb_marketing_api function enables querying daily monthly active users specific locations specific types. Many parameters rely IDs obtained get_fb_parameter_ids function. example, get_fb_parameter_ids can used obtain location key New York City interest parameter ID “Music (entertainment & media)”; IDs can used query_fb_marketing_api obtain number Facebook users interested music live New York City.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"different-location-types","dir":"Articles","previous_headings":"Querying Data","what":"Different Location Types","title":"rsocialwatcher: Usage Examples","text":"number daily monthly active Facebook users can queried (1) around specific point (setting latitude longitude radius around point), (2) specific geographic (e.g., country, region, city, neighborhood, etc.). small geographies, neighborhoods, radius can also set.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"radius-around-latlon","dir":"Articles","previous_headings":"Querying Data > Different Location Types","what":"Radius around lat/lon","title":"rsocialwatcher: Usage Examples","text":"Facebook enables querying specific location determine suggested radius reach enough people (see Facebook documentation ). can use get_fb_suggested_radius function get suggested radius. shows querying suggested radius Paris, France Paris, Kentucky.","code":"## All Facebook Users by Radius (Near NYC) query_fb_marketing_api(location_unit_type = \"coordinates\",                                   lat_lon            = c(40.712, -74.006),                                   radius             = 5,                                   radius_unit        = \"kilometer\",                                   version            = VERSION,                                    creation_act       = CREATION_ACT,                                    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\") # Paris, France get_fb_suggested_radius(location = c(48.856667, 2.352222),                         version = VERSION,                         token = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\") # Paris, Kentucky get_fb_suggested_radius(location = c(38.209682, -84.253915),                         version = VERSION,                         token = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"location-ids---country-state-district-city-neighborhood-etc-","dir":"Articles","previous_headings":"Querying Data > Different Location Types","what":"Location IDs - Country, State, District, City, Neighborhood, etc.","title":"rsocialwatcher: Usage Examples","text":"can also query using different location types, including countries, cities, etc. get_fb_parameter_ids() function can used extract location keys different location types; location keys can used query_fb_marketing_api(). table indicates location types supported package. Location Type: specified (1) type parameter get_fb_parameter_ids() function location_unit_type parameter query_fb_marketing_api() function Radius Can Specified: location types, radius can optionally specified; example, specify location ’s surrounding area. US : location types can used US shows examples querying Facebook users type location type. Note entering type get_fb_parameter_ids, singular used (e.g., \"country\"), entering type query_fb_marketing_api, plural used (e.g., \"countries\"). Using singular type obtain IDs plural query number Facebook users mimics parameters entered Facebook Marketing API.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"country-groups","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"Country Groups","title":"rsocialwatcher: Usage Examples","text":"","code":"#### Country Group: World Wide loc_df <- get_fb_parameter_ids(type = \"country_group\",                                 version = VERSION, token = TOKEN)  query_fb_marketing_api(   location_unit_type = \"country_groups\",   location_keys      = loc_df %>%      filter(name == \"Worldwide\") %>%      pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"country","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"Country","title":"rsocialwatcher: Usage Examples","text":"","code":"#### Country: United States loc_df <- get_fb_parameter_ids(type = \"country\",                                 version = VERSION, token = TOKEN)  query_fb_marketing_api(   location_unit_type = \"countries\",   location_keys      = loc_df %>%      filter(name == \"United States\") %>%      pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"region","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"Region","title":"rsocialwatcher: Usage Examples","text":"","code":"#### Region: New York (state) region_df <- get_fb_parameter_ids(type = \"region\", country_code = \"US\",                                    version = VERSION, token = TOKEN)  query_fb_marketing_api(   location_unit_type = \"regions\",   location_keys      = region_df %>%      filter(name == \"New York\") %>%      pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"large-geographic-area","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"Large Geographic Area","title":"rsocialwatcher: Usage Examples","text":"Facebook Marketing Targeting Search provides following description large geographic areas: “Known commonly district governate covering hundreds square kilometers . Example: Akkar Lebanon.”","code":"#### Large Metro Area loc_df <- get_fb_parameter_ids(type = \"large_geo_area\",                                 country_code = \"LB\",                                 q = \"Akkar\",                                version = VERSION, token = TOKEN)  query_fb_marketing_api(   location_unit_type = \"large_geo_areas\",   location_keys      = loc_df %>%      filter(name == \"Akkar\") %>%      pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"medium-geographic-area","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"Medium Geographic Area","title":"rsocialwatcher: Usage Examples","text":"Facebook Marketing Targeting Search provides following description medium geographic areas: “Known commonly county, covering one city. Example: Henrico county state Virginia United States.”","code":"#### Large Metro Area loc_df <- get_fb_parameter_ids(type = \"medium_geo_area\",                                 country_code = \"US\",                                 q = \"Henrico\",                                version = VERSION, token = TOKEN)  query_fb_marketing_api(   location_unit_type = \"medium_geo_areas\",   location_keys      = loc_df %>%      filter(name == \"Henrico\") %>%      pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"small-geographic-area","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"Small Geographic Area","title":"rsocialwatcher: Usage Examples","text":"Facebook Marketing Targeting Search provides following description small geographic areas: “Known commonly residential area near city town. Example: El Rosario near Marbella Spain.”","code":"#### Large Metro Area loc_df <- get_fb_parameter_ids(type = \"small_geo_area\",                                 country_code = \"ES\",                                 q = \"El\",                                version = VERSION, token = TOKEN)  query_fb_marketing_api(   location_unit_type = \"small_geo_areas\",   location_keys      = loc_df %>%      filter(name == \"El Rosario\") %>%      pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"city","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"City","title":"rsocialwatcher: Usage Examples","text":"","code":"#### City: New York City loc_df <- get_fb_parameter_ids(type = \"city\",                                 region_id = region_df %>%                                   filter(name == \"New York\") %>%                                   pull(key),                                q = \"New York\",                                version = VERSION, token = TOKEN)  ## Facebook users in NYC query_fb_marketing_api(   location_unit_type = \"cities\",   location_keys      = loc_df %>% filter(name == \"New York\") %>% pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\") ## Facebook users in and 10 miles around NYC city_r_df <- query_fb_marketing_api(   location_unit_type = \"cities\",   location_keys      = loc_df %>% filter(name == \"New York\") %>% pull(key),   radius             = 10,   radius_unit        = \"mile\",   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"subcity","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"Subcity","title":"rsocialwatcher: Usage Examples","text":"","code":"#### Subcity: Manhattan loc_df <- get_fb_parameter_ids(type = \"subcity\",                                 region_id = region_df %>%                                   filter(name == \"New York\") %>%                                   pull(key),                                q = \"Manhattan\",                                version = VERSION, token = TOKEN)  query_fb_marketing_api(   location_unit_type = \"subcities\",   location_keys      = loc_df %>% filter(name == \"Manhattan\") %>% pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"neighborhood","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"Neighborhood","title":"rsocialwatcher: Usage Examples","text":"","code":"loc_df <- get_fb_parameter_ids(type = \"neighborhood\",                                 region_id = region_df %>%                                   filter(name == \"New York\") %>%                                   pull(key),                                q = \"East Village\",                                version = VERSION, token = TOKEN)  query_fb_marketing_api(   location_unit_type = \"neighborhoods\",   location_keys      = loc_df %>%      filter(name == \"East Village, Manhattan\") %>%      pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"zip-code","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"Zip Code","title":"rsocialwatcher: Usage Examples","text":"","code":"## Zip codes can be directly entered as \"US:[Zip Code]\" query_fb_marketing_api(   location_unit_type = \"zips\",   location_keys      = \"US:90210\",   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\") ## Zip codes can also be searched for using: \"get_fb_parameter_ids\" loc_df <- get_fb_parameter_ids(type = \"zip\",                                 q = \"9\", # Search using numbers                                version = VERSION, token = TOKEN)  query_fb_marketing_api(   location_unit_type = \"zips\",   location_keys      = loc_df %>% filter(name == \"90210\") %>% pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"geo-market-u-s--designated-market-areas","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"Geo Market (U.S. Designated Market Areas)","title":"rsocialwatcher: Usage Examples","text":"","code":"loc_df <- get_fb_parameter_ids(type = \"geo_market\",                                 version = VERSION, token = TOKEN)  query_fb_marketing_api(   location_unit_type = \"geo_markets\",   location_keys      = loc_df %>%      filter(name == \"New York\") %>%      pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"electoral-districts","dir":"Articles","previous_headings":"Querying Data > Different Location Types > Location IDs - Country, State, District, City, Neighborhood, etc.","what":"Electoral Districts","title":"rsocialwatcher: Usage Examples","text":"","code":"loc_df <- get_fb_parameter_ids(type = \"electoral_district\",                                 q = \"New York\",                                 version = VERSION, token = TOKEN)  query_fb_marketing_api(   location_unit_type = \"electoral_districts\",   location_keys      = loc_df %>%      filter(name == \"New York's 18th District - 2020 Census\") %>%      pull(key),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) %>%   kable() %>%    kable_styling() %>%   scroll_box(width = \"100%\")"},{"path":[]},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"using-one-parameter-id-per-parameter-type","dir":"Articles","previous_headings":"Querying Data > Querying data using parameter IDs","what":"Using one parameter ID per parameter type","title":"rsocialwatcher: Usage Examples","text":"use parameter IDs query number Facebook users behaviors, interests, etc. show examples querying data behaviors interests. condition used parameters entered multiple parameter types. example, third example shows querying users behavior interest—setting value query_fb_marketing_api behaviors (commuters) interests (music) parameters. case, function determines number Facebook users commuters interest music.","code":"# Likely commute to work in US beh_comm_id <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id) comm_us_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                      location_keys      = \"US\",                                      behaviors          = beh_comm_id,                                      version            = VERSION,                                       creation_act       = CREATION_ACT,                                       token              = TOKEN)  # Interested in music in US int_music_id <- interests_df %>% filter(name == \"Music (entertainment & media)\") %>% pull(id) music_us_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                       location_keys      = \"US\",                                       interests          = int_music_id,                                       version            = VERSION,                                        creation_act       = CREATION_ACT,                                        token              = TOKEN)  # Likely commute to work OR interested in music in US comm_or_music_us_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                               location_keys      = \"US\",                                               behaviors          = beh_comm_id,                                               interests          = int_music_id,                                               version            = VERSION,                                                creation_act       = CREATION_ACT,                                                token              = TOKEN)"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"and-and-or-categories","dir":"Articles","previous_headings":"Querying Data > Querying data using parameter IDs","what":"And and OR Categories","title":"rsocialwatcher: Usage Examples","text":"function allows specifying conditions; example, identifying Facebook users commuters /frequent travelers. Vectors lists used distinguish conditions: Vectors c() used specify conditions Lists list() used specify conditions However, following parameters can except one input (list vector allowed). location_unit_type radius radius_unit","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"within-parameter-types","dir":"Articles","previous_headings":"Querying Data > Querying data using parameter IDs > And and OR Categories","what":"Within parameter types","title":"rsocialwatcher: Usage Examples","text":"specify conditions parameter type: Enter multiple parameter IDs within vectors specify conditions Enter multiple parameter IDs within lists specify conditions","code":"beh_freqtrvl_id  <- behaviors_df %>% filter(name == \"Frequent Travelers\") %>% pull(id) beh_comm_id      <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id) beh_sb_id        <- behaviors_df %>% filter(name == \"Small business owners\") %>% pull(id)  # Users who are: Commuters or Travelers comm_or_trvl_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                           location_keys      = \"US\",                                           behaviors          = c(beh_comm_id, beh_freqtrvl_id),                                           version            = VERSION,                                            creation_act       = CREATION_ACT,                                            token              = TOKEN)  # Users who are: Commuters and Travelers comm_or_trvl_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                           location_keys      = \"US\",                                           behaviors          = list(beh_comm_id, beh_freqtrvl_id),                                           version            = VERSION,                                            creation_act       = CREATION_ACT,                                            token              = TOKEN) #> $error #> $error$message #> [1] \"(#100) Targeting spec must be an associative array (optionally json-encoded)\" #>  #> $error$type #> [1] \"OAuthException\" #>  #> $error$code #> [1] 100 #>  #> $error$fbtrace_id #> [1] \"AL3lf7qFJKbjbw4iZaXkaFL\"  # Users who are (Commuters or Small Business Owners) and Travelers comm_and_trvl_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                            location_keys      = \"US\",                                            behaviors          = list(c(beh_comm_id,                                                                        beh_sb_id),                                                                       beh_freqtrvl_id),                                            version            = VERSION,                                             creation_act       = CREATION_ACT,                                             token              = TOKEN) #> $error #> $error$message #> [1] \"(#100) Targeting spec must be an associative array (optionally json-encoded)\" #>  #> $error$type #> [1] \"OAuthException\" #>  #> $error$code #> [1] 100 #>  #> $error$fbtrace_id #> [1] \"AhX4ejs3nAaREsKz3v1Nzlu\""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"across-parameter-types-flexible-targetting","dir":"Articles","previous_headings":"Querying Data > Querying data using parameter IDs > And and OR Categories","what":"Across parameter types: Flexible Targetting","title":"rsocialwatcher: Usage Examples","text":"Flexible tagetting, using flex_target parameter, allows complicated parameter specification—including conditions across parameter types (eg, behavior X interest Y). input flex_target follows following logic: flex_target uses named lists specify (1) parameter type (2) parameter ID parameters within list index grouped using condition parameter separated across list indices spearated condition shows examples using dummy IDs Example 1: Condition shows example setting condition interest ID 2 behavior ID 2. interest:1 behavior:2 list index, grouped using condition (interests:1 behavior 2) Example 2: Condition shows example setting condition interest ID 2 behavior ID 2. interest:1 behavior:2 separated across list indices, separated condition (interests:1 behavior:2) Example 3: Conditions shows complicated example, grabs users meet (EITHER interests:1 behaviors:3) (behaviors:2). Everything within flex_param[[1]] grouped within conditions, different indices (flex_param[[1]] flex_param[[2]]) separated conditions.","code":"flex_param <- list(\"interests\" = 1, \"behaviors\" = 2) # flex_param[[1]] flex_param <- list(list(\"interests\" = 1), list(\"behaviors\" = 2)) # flex_param[[1]] AND flex_param[[2]] flex_param <- list(list(\"interests\" = 1, \"behaviors\" = 3), list(\"behaviors\" = 2)) # flex_param[[1]] AND flex_param[[2]] int_music_id <- interests_df %>% filter(name == \"Music (entertainment & media)\") %>% pull(id) beh_comm_id  <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id)  ## OR CONDITION comm_or_music_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                            location_keys      = \"US\",                                            flex_target        = list(\"interests\" = int_music_id,                                                                      \"behaviors\" = beh_comm_id),                                            version            = VERSION,                                             creation_act       = CREATION_ACT,                                             token              = TOKEN)  ## AND CONDITION comm_and_music_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                             location_keys      = \"US\",                                             flex_target        = list(list(\"interests\" = int_music_id),                                                                       list(\"behaviors\" = beh_comm_id)),                                             version            = VERSION,                                              creation_act       = CREATION_ACT,                                              token              = TOKEN)  bind_rows(comm_or_music_df,           comm_and_music_df) %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\",              height = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"excluding-categories","dir":"Articles","previous_headings":"Querying Data > Querying data using parameter IDs","what":"Excluding Categories","title":"rsocialwatcher: Usage Examples","text":"Many parameters come alternate input starts excl_ exclude types users. example, behaviors interests parameters, well excl_behaviors excl_interests parameters. code shows example querying users likely commute work tagged interested music.","code":"# Likely commute to work BUT NOT interested in music in US beh_comm_id  <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id) int_music_id <- interests_df %>% filter(name == \"Music (entertainment & media)\") %>% pull(id)  comm_no_music_us_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                               location_keys      = \"US\",                                               behaviors          = beh_comm_id,                                               excl_interests     = int_music_id,                                               version            = VERSION,                                                creation_act       = CREATION_ACT,                                                token              = TOKEN)"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"multiple-queries","dir":"Articles","previous_headings":"Querying Data","what":"Multiple Queries","title":"rsocialwatcher: Usage Examples","text":"function allows making multiple queries within one function call. parameters map_param function iterated separate calls. example, location_unit_type = \"countries\", location_key = map_param(\"US\", \"MX\") make one query US, second query Mexico. map_param functions creates object class map_param, instructs query_fb_marketing_api() make separate queries different items map_param. shows examples. Assume hat using map_param create separate queries interests, interest ID 1 2. Example 1: Simple example, making one query determining number users interest 1, separate query determine number users interest 2. Example 2: Note make one query, querying users interest 1 2. one item: c(1,2) – function interprets using condition. Example 3: map vector, can use map_param_vec() function—creates separate query item vector.","code":"map_param(1, 2) #> [[1]] #> [1] \"map_param\" #>  #> [[2]] #> [1] 1 #>  #> [[3]] #> [1] 2 interests_vec <- c(1, 2)  map_param(interests_vec) #> [[1]] #> [1] \"map_param\" #>  #> [[2]] #> [1] 1 2 interests_vec <- c(1, 2)  map_param_vec(interests_vec) #> [1] \"map_param\" \"1\"         \"2\""},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"simple-examples","dir":"Articles","previous_headings":"Querying Data > Multiple Queries","what":"Simple Examples","title":"rsocialwatcher: Usage Examples","text":"show simple examples using map_param.","code":"## Number of Users in US or Mexico, as separate queries df_out <- query_fb_marketing_api(location_unit_type = \"countries\",                                  location_key       = map_param(\"US\", \"MX\"),                                  version            = VERSION,                                   creation_act       = CREATION_ACT,                                   token              = TOKEN)  df_out %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\") ## Same query as above, but using a pre-defined vector of countries # Because we use a vector, we need to use map_param_vec instead of map_param countries_vec <- c(\"US\", \"MX\") df_out <- query_fb_marketing_api(location_unit_type = \"countries\",                                  location_key       = map_param_vec(countries_vec),                                  version            = VERSION,                                   creation_act       = CREATION_ACT,                                   token              = TOKEN)  df_out %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\") ## Iterate across countries and across behaviors. Use `NA` for not filtering by behavior. The below call will give users for (1) all US, (2) all Mexico, (3) frequent travelers in US, and (4) frequenty travelers in Mexico. df_out <- query_fb_marketing_api(location_unit_type = \"countries\",                                  location_key       = map_param(\"US\", \"MX\"),                                  behaviors          = map_param(NA, beh_freqtrvl_id),                                  version            = VERSION,                                   creation_act       = CREATION_ACT,                                   token              = TOKEN)  df_out %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\") ## Separate query for number of users in US and Mexico and commuters and frequent travelers. Parameters not in ## map_param are applied across all queries.  beh_comm_id      <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id) beh_freqtrvl_id  <- behaviors_df %>% filter(name == \"Frequent Travelers\") %>% pull(id) beh_sb_id        <- behaviors_df %>% filter(name == \"Small business owners\") %>% pull(id) int_music_id     <- interests_df %>% filter(name == \"Music (entertainment & media)\") %>% pull(id)  df_out <- query_fb_marketing_api(location_unit_type = \"countries\",                                  location_key       = map_param(\"US\", \"MX\"),                                  behaviors          = map_param(beh_comm_id, beh_freqtrvl_id),                                  interests          = int_music_id,                                  version            = VERSION,                                   creation_act       = CREATION_ACT,                                   token              = TOKEN)  df_out %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/articles/rsocialwatcher-vignette.html","id":"andor-conditions","dir":"Articles","previous_headings":"Querying Data > Multiple Queries","what":"And/Or Conditions","title":"rsocialwatcher: Usage Examples","text":"/conditions work : vectors c() specify conditions, lists list() specify conditions.","code":"beh_freqtrvl_id  <- behaviors_df %>% filter(name == \"Frequent Travelers\") %>% pull(id) beh_comm_id      <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id) beh_sb_id        <- behaviors_df %>% filter(name == \"Small business owners\") %>% pull(id)  df_out <- query_fb_marketing_api(   location_unit_type = \"countries\",   location_key       = \"US\",   behaviors          = map_param(     # Commuters     beh_comm_id,           # Frequent Travelers     beh_freqtrvl_id,           # Commuters OR Frequent Travelers     c(beh_comm_id, beh_freqtrvl_id),          # Commuters AND Frequent Travelers     list(beh_comm_id, beh_freqtrvl_id),          # Commuters AND (Frequent Travelers OR Small Business Owners)     list(beh_comm_id, c(beh_freqtrvl_id, beh_sb_id))   ),      version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) #> $error #> $error$message #> [1] \"(#100) Targeting spec must be an associative array (optionally json-encoded)\" #>  #> $error$type #> [1] \"OAuthException\" #>  #> $error$code #> [1] 100 #>  #> $error$fbtrace_id #> [1] \"AuRedacpFyT445bgZpFFdrR\"  df_out %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\")"},{"path":"https://worldbank.github.io/rsocialwatcher/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robert Marty. Author, maintainer.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marty R (2024). rsocialwatcher: 'Facebook Marketing' API Social Watcher. R package version 0.1.0, https://worldbank.github.io/rsocialwatcher/.","code":"@Manual{,   title = {rsocialwatcher: 'Facebook Marketing' API Social Watcher},   author = {Robert Marty},   year = {2024},   note = {R package version 0.1.0},   url = {https://worldbank.github.io/rsocialwatcher/}, }"},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"rsocialwatcher-","dir":"","previous_headings":"","what":"Facebook Marketing API Social Watcher","title":"Facebook Marketing API Social Watcher","text":"Query data Facebook Marketing API using R, focus social science research. Overview Installation Credentials Quick Start Usage","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"overview-","dir":"","previous_headings":"","what":"Overview","title":"Facebook Marketing API Social Watcher","text":"package facilitates querying data Facebook Marketing API. packages inspired pySocialWatcher, similar package built Python. Emerging research shown Facebook Marketing API can provide useful data social science research. example, Facebook marketing data used : Poverty estimation () Disease surveillance Migrants United States () Monitoring refugee migrant flows Venezuela Quantifying mobility patterns Studying Urban/Rural Divide package provides following functions: get_fb_parameter_ids(): obtain IDs targeting users different characteristics, including (1) different parameter types (eg, behaviors interests) (2) location keys (eg, city keys) get_location_coords(): obtain coordinates , available, geometries locations based location keys. query_fb_marketing_api(): Query daily monthly active users, querying users specific locations specific types. get_fb_suggested_radius(): Determine suggested radius reach enough people given coordinate pair.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"installation-","dir":"","previous_headings":"","what":"Installation","title":"Facebook Marketing API Social Watcher","text":"package available via Github can install using devtools.","code":"# install.packages(\"devtools\") devtools::install_github(\"worldbank/rsocialwatcher\")"},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"facebook-api-credentials-","dir":"","previous_headings":"","what":"Facebook API Credentials","title":"Facebook Marketing API Social Watcher","text":"Using Facebook Marketing API requires indicating following: Token Version Creation Follow instructions obtain credentials.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"quickstart-","dir":"","previous_headings":"","what":"Quickstart","title":"Facebook Marketing API Social Watcher","text":"Setup Get Facebook Parameter IDs Query Facebook Users Different Location Types Query Facebook Users Different Attributes Map Multiple Queries","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"setup-","dir":"","previous_headings":"Quickstart","what":"Setup","title":"Facebook Marketing API Social Watcher","text":"","code":"library(rsocialwatcher) library(dplyr)  # Define API version, creation act & token ------------------------------------- VERSION      <- \"[ENTER HERE]\" # Example: \"v19.0\" CREATION_ACT <- \"[ENTER HERE]\" TOKEN        <- \"[ENTER HERE]\""},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"get-dataframes-of-select-parameter-ids-","dir":"","previous_headings":"Quickstart","what":"Get dataframes of select parameter IDs","title":"Facebook Marketing API Social Watcher","text":"","code":"# Get dataframe of Facebook parameter IDs and descriptions --------------------- ## Interests and behaviors interests_df <- get_fb_parameter_ids(\"interests\", VERSION, TOKEN) behaviors_df <- get_fb_parameter_ids(\"behaviors\", VERSION, TOKEN)  ## Locations: countries country_df <- get_fb_parameter_ids(\"country\", VERSION, TOKEN)"},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"query-data-for-different-location-types-","dir":"","previous_headings":"Quickstart","what":"Query data for different location types","title":"Facebook Marketing API Social Watcher","text":"Example: Query Facebook users US Example: Query Facebook users around specific location","code":"us_key <- country_df %>%    filter(name == \"United States\") %>%    pull(key)  us_df <- query_fb_marketing_api(   location_unit_type = \"countries\",   location_keys      = us_key,   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) latlon_df <- query_fb_marketing_api(   location_unit_type = \"coordinates\",   lat_lon            = c(40.712, -74.006),   radius             = 5,   radius_unit        = \"kilometer\",   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN)"},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"obtain-location-coordinatesgeometries-","dir":"","previous_headings":"Quickstart","what":"Obtain location coordinates/geometries","title":"Facebook Marketing API Social Watcher","text":"Example: Location coordinates , available, geometries can obtained using get_location_coords function. Example: addition, obtaining location IDs using query_fb_marketing_api function, can directly add coordinates/geometries setting add_location_coords TRUE.","code":"countries_sf <- get_location_coords(   location_unit_type = \"countries\",   location_keys      = c(\"US\", \"MX\", \"CA\"),   version            = VERSION,   token              = TOKEN ) us_states_sf <- get_fb_parameter_ids(   type = \"region\",    country_code = \"US\",    version = VERSION,    token = TOKEN,   add_location_coords = T)"},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"get-suggested-radius","dir":"","previous_headings":"Quickstart","what":"Get suggested radius","title":"Facebook Marketing API Social Watcher","text":"Facebook enables querying specific location determine suggested radius reach enough people (see Facebook documentation ). can use get_fb_suggested_radius function get suggested radius. shows querying suggested radius Paris, France Paris, Kentucky.","code":"# Paris, France get_fb_suggested_radius(location = c(48.856667, 2.352222),                         version = VERSION,                         token = TOKEN)  # Paris, Kentucky get_fb_suggested_radius(location = c(38.209682, -84.253915),                         version = VERSION,                         token = TOKEN)"},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"query-data-for-different-user-attributes-","dir":"","previous_headings":"Quickstart","what":"Query data for different user attributes","title":"Facebook Marketing API Social Watcher","text":"Example [One parameter]: Facebook users primarily access Facebook using Mac OS X living US Example [Two parameters, condition]: Facebook users primarily access Facebook using Mac OS X likely technology early adopters live US. Vectors IDs used specify conditions. Example [Two parameters, condition]: Facebook users primarily access Facebook using Mac OS X likely technology early adopters live US. Lists IDs used specify conditions. Example [Two parameters, condition]: Facebook users (primarily access Facebook using Mac OS X likely technology early adopters) interested computers, live US. Multiple parameters (eg, behavior interests) grouped using conditions default. “flex_target” parameters can used specify conditions across parameters; see examples.","code":"beh_mac_id <- behaviors_df %>%    filter(name == \"Facebook access (OS): Mac OS X\") %>%    pull(id)  us_mac_df <- query_fb_marketing_api(   location_unit_type = \"country\",   location_keys      = \"US\",   behaviors          = beh_mac_id,   version            = VERSION,   creation_act       = CREATION_ACT,   token              = TOKEN) beh_tech_id <- behaviors_df %>%    filter(name == \"Technology early adopters\") %>%    pull(id)  us_mac_or_tech_df <- query_fb_marketing_api(   location_unit_type = \"country\",   location_keys      = \"US\",   behaviors          = c(beh_mac_id, beh_tech_id),   version            = VERSION,   creation_act       = CREATION_ACT,   token              = TOKEN) us_mac_and_tech_df <- query_fb_marketing_api(   location_unit_type = \"country\",   location_keys      = \"US\",   behaviors          = list(beh_mac_id, beh_tech_id),   version            = VERSION,   creation_act       = CREATION_ACT,   token              = TOKEN) int_comp_id <- interests_df %>%    filter(name == \"Computers (computers & electronics))\") %>%    pull(id)  us_mac_and_tech_or_comp_df <- query_fb_marketing_api(   location_unit_type = \"country\",   location_keys      = \"US\",   behaviors          = list(beh_mac_id, beh_tech_id),   interests          = int_comp_id   version            = VERSION,   creation_act       = CREATION_ACT,   token              = TOKEN)"},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"map-over-multiple-queries-","dir":"","previous_headings":"Quickstart","what":"Map Over Multiple Queries","title":"Facebook Marketing API Social Watcher","text":"Putting parameters map_param function results query_fb_marketing_api function making multiple queries. Example: Make queries different countries. Example: Make queries different behaviors. total, six queries made (mapping three countries two parameters). Example: Make query country, : access Facebook using Mac OS X likely technology early adopters access Facebook using Mac OS X likely technology early adopters illustrates can make complex queries (ie, using ) conditions within map_param() Example: Make queries using vector input. , want make separate query six countries. define following vector: countries <- c(\"US\", \"CA\", \"MX\", \"FR\", \"GB\", \"ES\") However, : location_keys = map_param(countries) map_param() views countries one item (vector countries), make just 1 query—querying number MAU/DAU across countries. make query item vector, use map_param_vec().","code":"country_df %>%    filter(name %in% c(\"United States\", \"Canada\", \"Mexico\")) %>%    pull(key)  us_mult_cnt_df <- query_fb_marketing_api(   location_unit_type = \"country\",   location_keys      = map_param(\"US\", \"CA\", \"MX\"),   behaviors          = c(beh_mac_id, beh_tech_id),   interests          = int_comp_id   version            = VERSION,   creation_act       = CREATION_ACT,   token              = TOKEN) us_mult_cnt_param_df <- query_fb_marketing_api(   location_unit_type = \"country\",   location_keys      = map_param(\"US\", \"CA\", \"MX\"),   behaviors          = map_param(beh_mac_id, beh_tech_id),   interests          = int_comp_id   version            = VERSION,   creation_act       = CREATION_ACT,   token              = TOKEN) us_mult_cnt_param_df <- query_fb_marketing_api(   location_unit_type = \"country\",   location_keys      = map_param(\"US\", \"CA\", \"MX\"),   behaviors          = map_param(c(beh_mac_id, beh_tech_id), # OR condition                                  list(beh_mac_id, beh_tech_id)), # AND condition   interests          = int_comp_id   version            = VERSION,   creation_act       = CREATION_ACT,   token              = TOKEN) countries <- c(\"US\", \"CA\", \"MX\", \"FR\", \"GB\", \"ES\")  # INCORRECT: The below will make 1 query, querying the number of MAU/DAU across countries. us_mult_cnt_param_df <- query_fb_marketing_api(   location_unit_type = \"country\",   location_keys      = map_param(countries),   version            = VERSION,   creation_act       = CREATION_ACT,   token              = TOKEN)    # CORRECT: The below will make 6 queries, one for each country. us_mult_cnt_param_df <- query_fb_marketing_api(   location_unit_type = \"country\",   location_keys      = map_param_vec(countries),   version            = VERSION,   creation_act       = CREATION_ACT,   token              = TOKEN)"},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"using-multiple-api-tokens-","dir":"","previous_headings":"Quickstart","what":"Using Multiple API Tokens","title":"Facebook Marketing API Social Watcher","text":"Facebook API rate limited, certain number queries can made given time. rate limit reached, query_fb_marketing_api pause try query successfully called. query_fb_marketing_api can take long time complete mapping large number queries. Multiple API tokens can used minimize delay times function reaching rate limit. use multiple tokens, enter vector multiple entries version, creation_act, token. Example: Using multiple API tokens","code":"mult_queries_df <- query_fb_marketing_api(   location_unit_type = \"country\",   location_keys      = map_param(\"US\", \"CA\", \"MX\", \"GB\", \"FR\", \"DE\", \"IT\"),   behaviors          = c(beh_mac_id, beh_tech_id),   interests          = int_comp_id   version            = c(VERSION_1,      VERSION_2,      VERSION_3) ,   creation_act       = c(CREATION_ACT_1, CREATION_ACT_2, CREATION_ACT_3)   token              = c(TOKEN_1,        TOKEN_2,        TOKEN_3) )"},{"path":"https://worldbank.github.io/rsocialwatcher/index.html","id":"usage-","dir":"","previous_headings":"","what":"Usage","title":"Facebook Marketing API Social Watcher","text":"See vignette additional information examples illustrating use package.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_parameter_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook Parameter IDs — get_fb_parameter_ids","title":"Get Facebook Parameter IDs — get_fb_parameter_ids","text":"function returns dataframes Facebook parameters associated IDs different categories information. Categories include behaviors, interests, locales, job titles, education major, location (e.g., country, city, zip code, etc). returned dataframe contains ids can used query_fb_marketing_api function.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_parameter_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook Parameter IDs — get_fb_parameter_ids","text":"","code":"get_fb_parameter_ids(   type,   version,   token,   q = NULL,   country_code = NULL,   region_id = NULL,   key = NULL,   limit = NULL,   add_location_coords = FALSE )"},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_parameter_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook Parameter IDs — get_fb_parameter_ids","text":"type Type data. Either: \"behaviors\", \"demographics\", \"interests\", \"income\", \"industries\", \"life_events\", \"family_statuses\", \"work_positions\", \"work_employers\", \"education_statuses\", \"relationship_statuses\", \"education_majors\", \"locales\", \"country\", \"country_group\", \"region\", \"large_geo_area\", \"medium_geo_area\", \"small_geo_area\", \"city\", \"subcity\", \"neighborhood\", \"zip\", \"geo_market\", \"electoral_district\", \"zip\" version 'Facebook Marketing' API version; example, \"v19.0\" token 'Facebook Marketing' API token q Query string limit search. example, searching job titles, setting q=\"data\" return jobs \"data\" name, \"data science.\" country_code searching locations, limit search specific country; example, search cities within specific country. region_id searching locations, limit search specific region; example, search cities within specific region. key searching locations, limit search specific location key; example, search neighborhood within specific city. limit Number parameter IDs search . add_location_coords querying location IDs (eg, type = \"city), add location coordinates---add latitude longitude, well geometry available. (Default: FALSE)","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_parameter_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Facebook Parameter IDs — get_fb_parameter_ids","text":"Dataframe parameter IDs descriptions.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_parameter_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Facebook Parameter IDs — get_fb_parameter_ids","text":"additional information, see: https://developers.facebook.com/docs/marketing-api/audiences/reference/targeting-search/","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_parameter_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Facebook Parameter IDs — get_fb_parameter_ids","text":"","code":"if (FALSE) {  #### Define version and token VERSION = \"enter-version\" TOKEN = \"enter-token\"  #### Query parameter IDs get_fb_parameter_ids(type = \"interests\", version = VERSION, token = TOKEN) get_fb_parameter_ids(type = \"behaviors\", version = VERSION, token = TOKEN) get_fb_parameter_ids(type = \"education_majors\", q = \"Computer\", version = VERSION, token = TOKEN) get_fb_parameter_ids(type = \"education_schools\", q = \"Washington\", version = VERSION, token = TOKEN) get_fb_parameter_ids(type = \"education_statuses\", version = VERSION, token = TOKEN) get_fb_parameter_ids(type = \"family_statuses\", version = VERSION, token = TOKEN) get_fb_parameter_ids(type = \"income\", version = VERSION, token = TOKEN) get_fb_parameter_ids(type = \"industries\", version = VERSION, token = TOKEN) get_fb_parameter_ids(type = \"work_positions\", q = \"Data\", version = VERSION, token = TOKEN) get_fb_parameter_ids(type = \"work_employers\", q = \"World Bank\", version = VERSION, token = TOKEN) get_fb_parameter_ids(type = \"relationship_statuses\", version = VERSION, token = TOKEN) get_fb_parameter_ids(type = \"life_events\", version = VERSION, token = TOKEN)  #### Location IDs    }"},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_suggested_radius.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Suggested Radius — get_fb_suggested_radius","title":"Get Suggested Radius — get_fb_suggested_radius","text":"targeting around specific location, returns suggested radius reach enough people","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_suggested_radius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Suggested Radius — get_fb_suggested_radius","text":"","code":"get_fb_suggested_radius(location, distance_unit = \"kilometer\", version, token)"},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_suggested_radius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Suggested Radius — get_fb_suggested_radius","text":"location Vector latitude longitude (c(lat, lon)). distance_unit Either \"kilometer\" \"mile\"; defaults \"kilometer\" version 'Facebook Marketing' API version; example, \"v19.0\" token 'Facebook Marketing' API token","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_suggested_radius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Suggested Radius — get_fb_suggested_radius","text":"Dataframe suggested radius distance unit","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_suggested_radius.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Suggested Radius — get_fb_suggested_radius","text":"information, see Facebook documentation ","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_fb_suggested_radius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Suggested Radius — get_fb_suggested_radius","text":"","code":"if (FALSE) { get_fb_suggested_radius(location = c(38.89831, -77.03658),                         version  = \"v14.0\",                         token    = \"TOKEN-HERE\") }"},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_location_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Coordinates/Geometries for Valid Location Keys — get_location_coords","title":"Get Coordinates/Geometries for Valid Location Keys — get_location_coords","text":"Get Coordinates/Geometries Valid Location Keys","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_location_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Coordinates/Geometries for Valid Location Keys — get_location_coords","text":"","code":"get_location_coords(   location_unit_type,   location_keys,   version,   token,   large_query_chunk_size = 10,   large_query_pause = 0,   limit = NULL )"},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_location_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Coordinates/Geometries for Valid Location Keys — get_location_coords","text":"location_unit_type Either \"coordinates\" (buffer around single point) type geographic location, including: \"countries\", \"regions\", \"cities\", \"zips\", \"places\", \"geo_markets\", \"electoral_district\", \"country_groups\". See Basic Targetting documentation information. location_keys Key associated location. Use get_fb_parameter_ids function get location keys; see examples. version API version. e.g., \"v19.0\" token Facebook API token large_query_chunk_size function first try query locations using one API call. many locations requested, function query chunks. default, function query 10 locations time. (Default: 10). large_query_pause function first try query locations using one API call. many locations requested, function query chunks. query, large_query_pause can set > 0 sleep large_query_pause seconds order make many API calls quickly. (Default: 0). limit Number parameter IDs search . verbose function needs make multiple queries obtain location information location keys, print progress. (Default: TRUE).","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_location_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Coordinates/Geometries for Valid Location Keys — get_location_coords","text":"Spatial features dataframe","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/get_location_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Coordinates/Geometries for Valid Location Keys — get_location_coords","text":"","code":"if (FALSE) { #### Define version, creation act, and token VERSION = \"enter-version\" TOKEN = \"enter-token\"  #### Grab locations loc_sf <- get_location_coords(location_type = \"countries\",                                  location_keys = c(\"US\", \"MX\", \"CA\"),                                  version = VERSION,                                  token = TOKEN)  }"},{"path":"https://worldbank.github.io/rsocialwatcher/reference/map_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Parameters\nConverts a vector or list into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param. — map_param","title":"Map Parameters\nConverts a vector or list into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param. — map_param","text":"Map Parameters Converts vector list map_param object. map_param object entered parameter query_fb_marketing_api(), query_fb_marketing_api() makes separate query item within map_param.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/map_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Parameters\nConverts a vector or list into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param. — map_param","text":"","code":"map_param(...)"},{"path":"https://worldbank.github.io/rsocialwatcher/reference/map_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Parameters\nConverts a vector or list into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param. — map_param","text":"... Vector list","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/map_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Parameters\nConverts a vector or list into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param. — map_param","text":"Object class map_param; list structured contains different parameters query_fb_marketing_api() function.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/map_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Parameters\nConverts a vector or list into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param. — map_param","text":"","code":"if (FALSE) { # Make 3 queries: # 1. Number of males and females MAU/DAU # 2. Number of male MAU/DAU # 3. Number of female MAU/DAU query_fb_marketing_api(   location_unit_type = \"countries\",   location_keys      = \"US\",   gender             = map_param(c(1,2), 1, 2),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) }"},{"path":"https://worldbank.github.io/rsocialwatcher/reference/map_param_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Parameters over Vector\nConverts a vector into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param (ie, for each item in the original vector entered into map_param). — map_param_vec","title":"Map Parameters over Vector\nConverts a vector into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param (ie, for each item in the original vector entered into map_param). — map_param_vec","text":"Map Parameters Vector Converts vector map_param object. map_param object entered parameter query_fb_marketing_api(), query_fb_marketing_api() makes separate query item within map_param (ie, item original vector entered map_param).","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/map_param_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Parameters over Vector\nConverts a vector into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param (ie, for each item in the original vector entered into map_param). — map_param_vec","text":"","code":"map_param_vec(...)"},{"path":"https://worldbank.github.io/rsocialwatcher/reference/map_param_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Parameters over Vector\nConverts a vector into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param (ie, for each item in the original vector entered into map_param). — map_param_vec","text":"... Vector","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/map_param_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Parameters over Vector\nConverts a vector into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param (ie, for each item in the original vector entered into map_param). — map_param_vec","text":"Object class map_param; list structured contains different parameters query_fb_marketing_api() function.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/map_param_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Parameters over Vector\nConverts a vector into a map_param object. When a map_param object is entered as a parameter in query_fb_marketing_api(), query_fb_marketing_api() makes a separate query for each item within map_param (ie, for each item in the original vector entered into map_param). — map_param_vec","text":"","code":"if (FALSE) { # Make 2 queries: # 1. Number of male MAU/DAU # 2. Number of female MAU/DAU query_fb_marketing_api(   location_unit_type = \"countries\",   location_keys      = \"US\",   gender             = map_param_vec(1:2),   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN) }"},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Query 'Facebook Marketing' API — query_fb_marketing_api","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"Query 'Facebook Marketing' API","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"","code":"query_fb_marketing_api(   location_unit_type,   lat_lon = NULL,   radius = NULL,   radius_unit = NULL,   location_keys = NULL,   location_types = c(\"home\", \"recent\"),   locales = NULL,   interests = NULL,   behaviors = NULL,   college_years = NULL,   education_majors = NULL,   education_schools = NULL,   education_statuses = NULL,   family_statuses = NULL,   income = NULL,   industries = NULL,   life_events = NULL,   relationship_statuses = NULL,   work_positions = NULL,   work_employers = NULL,   excl_interests = NULL,   excl_behaviors = NULL,   excl_college_years = NULL,   excl_education_majors = NULL,   excl_education_schools = NULL,   excl_education_statuses = NULL,   excl_family_statuses = NULL,   excl_income = NULL,   excl_industries = NULL,   excl_life_events = NULL,   excl_relationship_statuses = NULL,   excl_work_positions = NULL,   excl_work_employers = NULL,   user_os = NULL,   wireless_carrier = NULL,   gender = c(1, 2),   age_min = 18,   age_max = 65,   flex_target = NULL,   version,   creation_act,   token,   sleep_time = 0.1,   show_result = FALSE,   verbose = TRUE,   add_query = FALSE,   add_query_hide_credentials = T )"},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"location_unit_type Either \"coordinates\" (buffer around single point) type geographic location, including: \"countries\", \"regions\", \"cities\", \"zips\", \"places\", \"geo_markets\", \"electoral_district\", \"country_groups\". See Basic Targetting documentation information. lat_lon Coordinates, c(lat, lon). example, c(38.90, -77.01) radius Radius around coordinate radius_unit Unit radius; either \"kilometer\" \"mile\" location_keys Key associated location. Use get_fb_parameter_ids function get location keys; see examples. location_types Either: (1) \"home\" (people whose stated location Facebook profile \"current city\" area, valided IP), (2) \"recent\" (people whose recent location selected area, determined mobile device data), (3) \"travel_in\" (people whose recent location selected area 100 miles stated current city), (4) c(\"home\", \"recent\") (people either category) locales Locales ID. information locales, see Advanced Targeting Documentation interests Interest IDs. example, interests = c(6003349442621, 6003139266461) target users interested either entertainment movies. Use get_fb_parameter_ids(type = \"interests\", ...) get dataframe IDs descriptions. information, see Basic Targeting Documentation. behaviors Behavior IDs. example, behaviors = c(6002714895372, 6008297697383) target users either frequent travelers returned travels 2 weeks ago. Use get_fb_parameter_ids(type = \"behaviors\", ...) get dataframe IDs descriptions. information, see Basic Targeting Documentation. college_years College graduation years. example, college_years = c(2014, 2015) target users graduated college 2014 2015. information, see Advanced Targeting Documentation. education_majors Education major IDs. example, education_majors = 123 target users majored computer science. Use get_fb_parameter_ids(type = \"education_majors\", q = \"Computer\", ...) get dataframe IDs descriptions. information, see Advanced Targeting Documentation. education_schools School IDs. example, education_schools = 105930651606 taget users /graduated Harvard University. Use get_fb_parameter_ids(type = \"education_schools\", q = \"Harvard\", ...) get dataframe IDs descriptions. information, see Advanced Targeting Documentation. education_statuses Education status IDs. example, education_statuses = c(9,10) yeild report either Master degree professional degree. Use get_fb_parameter_ids(type = \"education_statuses\", ...) get dataframe IDs descriptions. information, see Advanced Targeting Documentation. family_statuses Family status IDs. example, family_statuses = c(6023080302983, 6023005681983) targets users parents preteens parents teenagers. Use get_fb_parameter_ids(type = \"family_statuses\") get dataframe IDs descriptions. information, see Advanced Targeting Documentation. income Income IDs. example, income = c(6107813553183, 6107813554583) targets users household income top 10%-25% 25%-50% ZIP codes (US). Use get_fb_parameter_ids(type = \"income\") get dataframe IDs descriptions. information, see Advanced Targeting Documentation. industries Industries IDs. example, industries = c(6008888980183, 6008888972183) targets users work sales legal services. Use get_fb_parameter_ids(type = \"industries\") get dataframe IDs descriptions. information, see Advanced Targeting Documentation. life_events Life event IDs. example, life_events = c(6005149512172, 6005149512172) targets users recently moved new job. Use get_fb_parameter_ids(type = \"life_events\") get dataframe IDs descriptions. information, see Advanced Targeting Documentation. relationship_statuses Relationship status IDs. example, relationship_statuses = c(3,4) targets married engaged. Use get_fb_parameter_ids(type = \"relationship_statuses\") get dataframe IDs descriptions. information, see Advanced Targeting Documentation. work_positions Work position IDs. example, work_positions = 105763692790962 target users indicate contractors. Use get_fb_parameter_ids(type = \"work_positions\", ...) get dataframe IDs descriptions. information, see Advanced Targeting Documentation. work_employers Work employer IDs. example, work_employers = 50431654 target users work Microsoft. Use get_fb_parameter_ids(type = \"work_employers\", ...) get dataframe IDs descriptions. information, see Advanced Targeting Documentation. excl_interests Interest IDs exclude. excl_behaviors Behavior IDs exclude. excl_college_years Colleage year IDs exclude. excl_education_majors Education major IDs exclude. excl_education_schools Education school IDs exclude. excl_education_statuses Education status IDs exclude. excl_family_statuses Family status IDs exclude. excl_income Income IDs exclude. excl_industries Industry IDs exclude. excl_life_events Life event IDs exclude. excl_relationship_statuses Relationship status IDs exclude. excl_work_positions Work position IDs exclude. excl_work_employers Work employer IDs exclude. user_os User operating systems. example, user_os = ('iOS', 'Android') targets use either iOS Android OS; user_os = c(\"Android_ver_4.2_and_above\") targets using Android version 4.2 ; user_os = c(\"iOS_ver_8.0_to_9.0\") targets using iOS version 8.0 9.0. Different versions can specified. information, see Advanced Targeting Documentation. wireless_carrier Wireless carrier. set Wifi, targets connecting via Wifi network. information, see Advanced Targeting Documentation. gender Genders target; 1 targets males 2 targets females. Default . See gender Basic Targeting Documentation. age_min Minimum age. Default 18. See age_min Basic Targeting Documentation. age_max Maximum age. Default 65. See age_max Basic Targeting Documentation. flex_target Flexible targeting allows complicated parameter specifications. example, specifying conditions across parameter types (eg, behaviors interests). information use flexible targeting, see documentation . version API version. e.g., \"v19.0\" creation_act Facebook creation act token Facebook API token sleep_time much time (seconds) pause query (default: 0.1). show_result query, whether print number monthly active users (default: FALSE). verbose Display messages indicate function pausing making additional queries. Pausing can result API key rate limits internet (default: TRUE). add_query TRUE, add query text variable returned dataframe add_query_hide_credentials TRUE (add_query TRUE), hide creation_act token query text returned dataframe","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"Dataframe includes (1) daily monthly active users (2) parameter values","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"if-location-unit-type-is-coordinates-","dir":"Reference","previous_headings":"","what":"If location_unit_type is \"coordinates\"","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"NA","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"if-location-unit-type-is-not-coordinates-","dir":"Reference","previous_headings":"","what":"If location_unit_type is not \"coordinates\"","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"NA","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"other-location-parameters","dir":"Reference","previous_headings":"","what":"Other location parameters","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"NA","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"Within parameters, vectors (c()) specify conditions lists (list()) specify conditions. example, interests = c(6003349442621, 6003139266461) target users interested either entertainment movies, interests = list(6003349442621, 6003139266461) target users interested either entertainment movies. Across parameters, conditions used. example, enter interests = 6003349442621 behaviors = 6008297697383 specified, function query Facebook users interested entertainment frequent travelers. conditions across parameters can specified using flex_target argument.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"exclude-parameters","dir":"Reference","previous_headings":"","what":"Exclude parameters","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"NA","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"non-flexible-parameters","dir":"Reference","previous_headings":"","what":"Non-Flexible parameters","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"Across parameters, conditions used. example, gender = 1 age_min = 30, queries users male 30 years old. parameters specified flex_targeting Within parameters, vectors (c()) specify conditions. conditions specified within parameters.","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"flex-targeting","dir":"Reference","previous_headings":"","what":"Flex Targeting","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"NA","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"credentials","dir":"Reference","previous_headings":"","what":"Credentials","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"NA","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"scraping-parameters","dir":"Reference","previous_headings":"","what":"Scraping parameters","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"NA","code":""},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"return-query-text-as-variable-in-returned-dataframe","dir":"Reference","previous_headings":"","what":"Return query text as variable in returned dataframe","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"NA","code":""},{"path":[]},{"path":"https://worldbank.github.io/rsocialwatcher/reference/query_fb_marketing_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query 'Facebook Marketing' API — query_fb_marketing_api","text":"","code":"if (FALSE) { #### Define version, creation act, and token VERSION = \"enter-version\" CREATION_ACT = \"creation_act\" TOKEN = \"enter-token\"  #### Query data ## All Facebook users in US query_fb_marketing_api( location_unit_type = \"countries\", location_keys      = \"US\", version            = VERSION,  creation_act       = CREATION_ACT,  token              = TOKEN)  ## All Facebook users in US with interest in concernts concert_id <- get_fb_parameter_ids(type = \"interests\", version = VERSION, token = TOKEN) %>%    filter(name == \"Concerts (music event)\") %>%   pull(id)   query_fb_marketing_api(   location_unit_type = \"countries\",   location_keys      = \"US\",   interests          = concert_id,   version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN)   }"}]
