[{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"rSocialWatcher","text":"First, load relevant packages create variables Facebook API keys.","code":"## Load Google Traffic package library(rSocialWatcher)  ## Load packages for working with and visualizing data library(tidyverse)  library(dplyr) library(lubridate) library(jsonlite) library(httr) library(stringr)  library(knitr) library(kableExtra)  ## Set Facebook Keys TOKEN        <- \"TOKEN-HERE\" CREATION_ACT <- \"CREATION-ACT-HERE\" VERSION      <- \"VERSION-HERE\""},{"path":[]},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"demographics-interests-behaviors","dir":"Articles","previous_headings":"Querying Parameter IDs","what":"Demographics, Interests, & Behaviors","title":"rSocialWatcher","text":"","code":"behaviors_df <- get_fb_parameter_ids(type    = \"behaviors\",                                      version = VERSION,                                       token   = TOKEN)  demographics_df <- get_fb_parameter_ids(type    = \"demographics\",                                         version = VERSION,                                          token   = TOKEN)  interests_df <- get_fb_parameter_ids(type    = \"interests\",                                      version = VERSION,                                       token   = TOKEN)  behaviors_df %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\",              height = \"300px\")"},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"location-ids","dir":"Articles","previous_headings":"Querying Parameter IDs","what":"Location IDs","title":"rSocialWatcher","text":"","code":"country_df <- get_fb_parameter_ids(type    = \"country\",                                    version = VERSION,                                     token   = TOKEN)  country_group_df <- get_fb_parameter_ids(type    = \"country_group\",                                          version = VERSION,                                           token   = TOKEN)  us_states_df <- get_fb_parameter_ids(type    = \"region\",                                      version = VERSION,                                       token   = TOKEN,                                      country_code = \"US\")  ny_key <- us_states_df %>% filter(name == \"New York\") %>% pull(key)  ny_cities_df <- get_fb_parameter_ids(type    = \"city\",                                      version = VERSION,                                       token   = TOKEN,                                      region_id = ny_key,                                      q = \"New York\")  country_df %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\",              height = \"300px\")"},{"path":[]},{"path":[]},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"radius-around-latlon","dir":"Articles","previous_headings":"Querying Data > Different Location Types","what":"Radius around lat/lon","title":"rSocialWatcher","text":"","code":"## All Facebook Users by Radius (Near NYC) r5km_df <- query_fb_marketing_api(location_unit_type = \"coordinates\",                                   lat_lon = c(40.712, -74.006),                                   radius = 5,                                   radius_unit = \"kilometer\",                                   version            = VERSION,                                    creation_act       = CREATION_ACT,                                    token              = TOKEN)"},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"location-ids---country-state-district-city-neighborhood-etc-","dir":"Articles","previous_headings":"Querying Data > Different Location Types","what":"Location IDs - Country, State, District, City, Neighborhood, etc.","title":"rSocialWatcher","text":"can also query using different location types, including countries, cities, etc. get_fb_parameter_ids() function can used extract location keys different location types; location keys can used query_fb_marketing_api(). table indicates location types supported package. Location Type: specified (1) type parameter get_fb_parameter_ids() function location_unit_type parameter query_fb_marketing_api() function Radius Can Specified: location types, radius can optionally specified; example, specify location â€™s surrounding area. US : location types can used US","code":"## All Facebook Users by Radius (Near NYC) r5km_df <- query_fb_marketing_api(location_unit_type = \"coordinates\",                                   lat_lon = c(40.712, -74.006),                                   radius = 5,                                   radius_unit = \"kilometer\",                                   version            = VERSION,                                    creation_act       = CREATION_ACT,                                    token              = TOKEN)  ## All Facebook Users within US us_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                 location_keys      = \"US\",                                 version            = VERSION,                                  creation_act       = CREATION_ACT,                                  token              = TOKEN)  ## All Facebook Users within NYC nyc_key <- ny_cities_df %>% filter(name == \"New York\") %>% pull(key) nyc_df <- query_fb_marketing_api(location_unit_type = \"cities\",                                  location_keys      = nyc_key,                                  version            = VERSION,                                   creation_act       = CREATION_ACT,                                   token              = TOKEN)  nyc_df %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\",              height = \"300px\")"},{"path":[]},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"options","dir":"Articles","previous_headings":"Querying Data > ID Options","what":"Options","title":"rSocialWatcher","text":"","code":"# Likely commute to work in US beh_comm_id <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id) comm_us_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                      location_keys      = \"US\",                                      behaviors          = beh_comm_id,                                      version            = VERSION,                                       creation_act       = CREATION_ACT,                                       token              = TOKEN)  # Interested in music in US int_music_id <- interests_df %>% filter(name == \"Music (entertainment & media)\") %>% pull(id) music_us_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                       location_keys      = \"US\",                                       interests          = int_music_id,                                       version            = VERSION,                                        creation_act       = CREATION_ACT,                                        token              = TOKEN)  # Likely commute to work OR interested in music in US comm_or_music_us_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                               location_keys      = \"US\",                                               behaviors          = beh_comm_id,                                               interests          = int_music_id,                                               version            = VERSION,                                                creation_act       = CREATION_ACT,                                                token              = TOKEN)"},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"and-and-or-categories","dir":"Articles","previous_headings":"Querying Data > ID Options","what":"And and OR Categories","title":"rSocialWatcher","text":"using multiple parameters (eg, behavior IDs), function allows specifying condition; example, identifying Facebook users commuters /frequent travelers. Across parameters: Vectors c() used specify conditions Lists list() used specify conditions However, following parameters can except one input (list vector allowed). * location_unit_type * radius * radius_unit","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"within-parameter-types","dir":"Articles","previous_headings":"Querying Data > ID Options > And and OR Categories","what":"Within parameter types","title":"rSocialWatcher","text":"","code":"beh_freqtrvl_id  <- behaviors_df %>% filter(name == \"Frequent Travelers\") %>% pull(id) beh_comm_id      <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id) beh_sb_id        <- behaviors_df %>% filter(name == \"Small business owners\") %>% pull(id)  # Commuters or Travelers comm_or_trvl_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                           location_keys      = \"US\",                                           behaviors          = c(beh_comm_id, beh_freqtrvl_id),                                           version            = VERSION,                                            creation_act       = CREATION_ACT,                                            token              = TOKEN)  # Users who are (Commuters or Small Business Owners) and Travelers comm_and_trvl_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                            location_keys      = \"US\",                                            behaviors          = list(c(beh_comm_id,                                                                        beh_sb_id),                                                                       beh_freqtrvl_id),                                            version            = VERSION,                                             creation_act       = CREATION_ACT,                                             token              = TOKEN)"},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"flexible-targetting-or-and-and","dir":"Articles","previous_headings":"Querying Data > ID Options > And and OR Categories","what":"Flexible Targetting: Or and And","title":"rSocialWatcher","text":"Flexible tagetting, using flex_target parameter, allows complicated parameter specificationâ€”including conditions across parameter types (eg, behavior X interest Y). input flex_target follows following logic: flex_target uses named lists specify (1) parameter type (2) parameter ID parameters within list index grouped using condition parameter separated across list indices spearated condition shows examples using dummy IDs Example 1: Condition shows example setting condition interest ID 2 behavior ID 2. interest:1 behavior:2 list index, grouped using condition (interests:1 behavior 2) Example 2: Condition shows example setting condition interest ID 2 behavior ID 2. interest:1 behavior:2 separated across list indices, separated condition (interests:1 behavior:2) Example 3: Conditions shows complicated example, grabs users meet EITHER interests:1 behaviors:3 behaviors:2. Everything within flex_param[[1]] grouped within conditions, different indices (flex_param[[1]] flex_param[[2]]) separated conditions.","code":"flex_param <- list(\"interests\" = 1, \"behaviors\" = 2) # flex_param[[1]] flex_param <- list(list(\"interests\" = 1), list(\"behaviors\" = 2)) # flex_param[[1]] AND flex_param[[2]] flex_param <- list(list(\"interests\" = 1, \"behaviors\" = 3), list(\"behaviors\" = 2)) # flex_param[[1]] AND flex_param[[2]] int_music_id <- interests_df %>% filter(name == \"Music (entertainment & media)\") %>% pull(id) beh_comm_id  <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id)  ## OR CONDITION comm_or_music_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                            location_keys      = \"US\",                                            flex_target        = list(\"interests\" = int_music_id,                                                                      \"behaviors\" = beh_comm_id),                                            version            = VERSION,                                             creation_act       = CREATION_ACT,                                             token              = TOKEN)  ## AND CONDITION comm_and_music_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                             location_keys      = \"US\",                                             flex_target        = list(list(\"interests\" = int_music_id),                                                                       list(\"behaviors\" = beh_comm_id)),                                             version            = VERSION,                                              creation_act       = CREATION_ACT,                                              token              = TOKEN)  bind_rows(comm_or_music_df,           comm_and_music_df) %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\",              height = \"100%\")"},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"exlcuding-categories","dir":"Articles","previous_headings":"Querying Data > ID Options","what":"Exlcuding Categories","title":"rSocialWatcher","text":"Many parameters come alternate input starts excl_ exclude types users. example, behaviors interests parameters, well excl_behaviors excl_interests parameters. code shows example querying users likely commute work tagged interested music.","code":"# Likely commute to work BUT NOT interested in music in US beh_comm_id  <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id) int_music_id <- interests_df %>% filter(name == \"Music (entertainment & media)\") %>% pull(id)  comm_no_music_us_df <- query_fb_marketing_api(location_unit_type = \"countries\",                                               location_keys      = \"US\",                                               behaviors          = beh_comm_id,                                               excl_interests     = int_music_id,                                               version            = VERSION,                                                creation_act       = CREATION_ACT,                                                token              = TOKEN)"},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"multiple-queries","dir":"Articles","previous_headings":"Querying Data","what":"Multiple Queries","title":"rSocialWatcher","text":"function allows making multiple queries within one function call. parameters map_param function iterated separate calls","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"simple-examples","dir":"Articles","previous_headings":"Querying Data > Multiple Queries","what":"Simple Examples","title":"rSocialWatcher","text":"","code":"## Number of Users in US or Mexico, as separate queries df_out <- query_fb_marketing_api(location_unit_type = \"countries\",                                  location_key       = map_param(\"US\", \"MX\"),                                  version            = VERSION,                                   creation_act       = CREATION_ACT,                                   token              = TOKEN)  df_out %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\") ## Iterate across countries and across behaviors. Use `NA` for not filtering by behavior. The below call will give users for (1) all US, (2) all Mexico, (3) frequent travelers in US, and (4) frequenty travelers in Mexico. df_out <- query_fb_marketing_api(location_unit_type = \"countries\",                                  location_key       = map_param(\"US\", \"MX\"),                                  behaviors          = map_param(NA, beh_freqtrvl_id),                                  version            = VERSION,                                   creation_act       = CREATION_ACT,                                   token              = TOKEN)  df_out %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\") ## Separate query for number of users in US and Mexico and commuters and frequent travelers. Parameters not in ## map_param are applied across all queries.  beh_comm_id      <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id) beh_freqtrvl_id  <- behaviors_df %>% filter(name == \"Frequent Travelers\") %>% pull(id) beh_sb_id        <- behaviors_df %>% filter(name == \"Small business owners\") %>% pull(id) int_music_id     <- interests_df %>% filter(name == \"Music (entertainment & media)\") %>% pull(id)  df_out <- query_fb_marketing_api(location_unit_type = \"countries\",                                  location_key       = map_param(\"US\", \"MX\"),                                  behaviors          = map_param(beh_comm_id, beh_freqtrvl_id),                                  interests          = int_music_id,                                  version            = VERSION,                                   creation_act       = CREATION_ACT,                                   token              = TOKEN)  df_out %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\")"},{"path":"https://ramarty.github.io/rSocialWatcher/articles/rsocialwatcher-vignette.html","id":"andor-conditions","dir":"Articles","previous_headings":"Querying Data > Multiple Queries","what":"And/Or Conditions","title":"rSocialWatcher","text":"/conditions work : vectors c() specify conditions, lists list() specify conditions","code":"beh_freqtrvl_id  <- behaviors_df %>% filter(name == \"Frequent Travelers\") %>% pull(id) beh_comm_id      <- behaviors_df %>% filter(name == \"Commuters\") %>% pull(id) beh_sb_id        <- behaviors_df %>% filter(name == \"Small business owners\") %>% pull(id)  df_out <- query_fb_marketing_api(   location_unit_type = \"countries\",   location_key       = \"US\",   behaviors          = map_param(     # Commuters     beh_comm_id,           # Frequent Travelers     beh_freqtrvl_id,           # Commuters OR Frequent Travelers     c(beh_comm_id, beh_freqtrvl_id),          # Commuters AND Frequent Travelers     list(beh_comm_id, beh_freqtrvl_id),          # Commuters AND (Frequent Travelers OR Small Business Owners)     list(beh_comm_id, c(beh_freqtrvl_id, beh_sb_id))   ),      version            = VERSION,    creation_act       = CREATION_ACT,    token              = TOKEN)  df_out %>%    kable() %>%    kable_styling() %>%    scroll_box(width = \"100%\")"},{"path":"https://ramarty.github.io/rSocialWatcher/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robert Marty. Author, maintainer.","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marty R (2023). rSocialWatcher: Package (One Line, Title Case). R package version 0.0.0.9000, https://ramarty.github.io/rSocialWatcher/.","code":"@Manual{,   title = {rSocialWatcher: What the Package Does (One Line, Title Case)},   author = {Robert Marty},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://ramarty.github.io/rSocialWatcher/}, }"},{"path":"https://ramarty.github.io/rSocialWatcher/index.html","id":"rsocialwatcher","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"Query data Facebook Marketing API using R, focus social science research.","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"What the Package Does (One Line, Title Case)","text":"package facilitates querying data Facebook Marketing API. packages inspired pySocialWatcher, similar package built python. Emerging research shown Facebook Marketing API can provide useful data social science research. example, Fatehkia et al 2020 show use Facebook data estimating poverty; features proportion monthly active Facebook users high-end phone correlate strongly ground-truth measures poverty.","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"package available via Github can install using devtools.","code":"# install.packages(\"devtools\") devtools::install_github(\"ramarty/rSocialWatcher\")"},{"path":"https://ramarty.github.io/rSocialWatcher/index.html","id":"facebook-api-keys","dir":"","previous_headings":"","what":"Facebook API Keys","title":"What the Package Does (One Line, Title Case)","text":"[INCLUDE TEXT DESCRIBING GET KEY].","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"What the Package Does (One Line, Title Case)","text":"","code":"# Define API version, creation act & token ------------------------------------- VERSION      <- \"[ENTER HERE]\" CREATION_ACT <- \"[ENTER HERE]\" TOKEN        <- \"[ENTER HERE]\"  # Get dataframe of Facebook parameter IDs and descriptions --------------------- demographics_df <- get_fb_parameter_ids(\"demographics\", VERSION, TOKEN) interests_df    <- get_fb_parameter_ids(\"interests\",    VERSION, TOKEN) behaviors_df    <- get_fb_parameter_ids(\"behaviors\",    VERSION, TOKEN)  # Query country level ---------------------------------------------------------- # MAU/DAU of all Facebook users fb_1_ke_df <- query_fb_marketing_api(   location_type = \"country\",   country_iso2  = \"KE\",   version       = VERSION,   creation_act  = CREATION_ACT,   token         = TOKEN)  # MAU/DAU of people who primarily access Facebook using Mac OS X fb_2_ke_df <- query_fb_marketing_api(   location_type = \"country\",   country_iso2  = \"KE\",   behavior      = 6003966451572,   version       = VERSION,   creation_act  = CREATION_ACT,   token         = TOKEN)  # MAU/DAU of people who primarily access Facebook using Mac OS X OR # who access Facebook mobile using iPhone XS Max fb_3_ke_df <- query_fb_marketing_api(   location_type = \"country\",   country_iso2  = \"KE\",   behavior      = c(6003966451572, 6120699721983),   version       = VERSION,   creation_act  = CREATION_ACT,   token         = TOKEN)  # MAU/DAU of people who primarily access Facebook using Mac OS X OR # who access Facebook mobile using iPhone XS Max OR # who are interested in technology fb_4_ke_df <- query_fb_marketing_api(   location_type = \"country\",   country_iso2  = \"KE\",   behavior      = c(6003966451572, 6120699721983),   interest      = 6003985771306,   version       = VERSION,   creation_act  = CREATION_ACT,   token         = TOKEN)  # Query specific location ------------------------------------------------------ # MAU/DAU of all Facebook users fb_1_latlon_df <- query_fb_marketing_api(   location_type = \"coordinates\",   latitude      = -1.286389,   longitude     = 36.817222,   radius        = 5,   radius_unit   = \"kilometer\",   version       = VERSION,   creation_act  = CREATION_ACT,   token         = TOKEN)"},{"path":"https://ramarty.github.io/rSocialWatcher/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"What the Package Does (One Line, Title Case)","text":"See vignette additional information examples illustrating use package.","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/fill_fb_id_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill Names of IDs â€” fill_fb_id_names","title":"Fill Names of IDs â€” fill_fb_id_names","text":"Facebook data contains variables IDs, can useful name associated ID. function creates variables contain name. cases multiple IDs, names separated semicolon. example, interest variable observation: \"6003349442621,6003020834693\", interest_name variable \"Entertainment; Music\" created.","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/fill_fb_id_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill Names of IDs â€” fill_fb_id_names","text":"","code":"fill_fb_id_names(fb_df, version, token)"},{"path":"https://ramarty.github.io/rSocialWatcher/reference/fill_fb_id_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill Names of IDs â€” fill_fb_id_names","text":"fb_df Facebook dataframe, returned query_fb_marketing_api() version Facebook Marketing API version; example, \"v14.0\" token Facebook Marketing API token","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/fill_fb_id_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill Names of IDs â€” fill_fb_id_names","text":"Dataframe Facebook results, additional variables created indicate name IDs","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/fill_fb_id_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill Names of IDs â€” fill_fb_id_names","text":"","code":"if (FALSE) { fb_df <- query_fb_marketing_api(location_unit_type = \"coordinates\",                                 lat_lon = c(38.90, -77.01),                                 radius = 10,                                 radius_unit = \"kilometer\",                                 interest = list(c(6002839660079,                                                   6002884511422),                                                 6002839660079,                                                 6002884511422),                                 behavior = list(c(6002714895372,                                                   6002714898572),                                                 6002714895372,                                                 6002714898572),                                 version = VERSION,                                  creation_act = CREATION_ACT,                                  token = TOKEN)  fb_df <- fill_fb_id_names(fb_df,                          version = VERSION,                          token = TOKEN) }"},{"path":"https://ramarty.github.io/rSocialWatcher/reference/get_fb_parameter_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook Parameter IDs â€” get_fb_parameter_ids","title":"Get Facebook Parameter IDs â€” get_fb_parameter_ids","text":"function returns dataframes Facebook parameters associated IDs different categories information. Categories include behaviors, demographics, interests, locales, job titles, education major, location (e.g., country, city, zip code, etc). returned dataframe contains ids can used query_fb_marketing_api function.","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/get_fb_parameter_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook Parameter IDs â€” get_fb_parameter_ids","text":"","code":"get_fb_parameter_ids(   type,   version,   token,   q = NULL,   country_code = NULL,   region_id = NULL,   key = NULL,   limit = NULL )"},{"path":"https://ramarty.github.io/rSocialWatcher/reference/get_fb_parameter_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook Parameter IDs â€” get_fb_parameter_ids","text":"type Type data; either \"behaviors\", \"demographics\", \"interests\", \"locales\" version Facebook Marketing API version; example, \"v14.0\" token Facebook Marketing API token","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/get_fb_parameter_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Facebook Parameter IDs â€” get_fb_parameter_ids","text":"Dataframe parameter IDs descriptions.","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/get_fb_suggested_radius.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Suggested Radius â€” get_fb_suggested_radius","title":"Get Suggested Radius â€” get_fb_suggested_radius","text":"targeting around specific location, returns suggested radius reach enough people","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/get_fb_suggested_radius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Suggested Radius â€” get_fb_suggested_radius","text":"","code":"get_fb_suggested_radius(location, distance_unit = \"kilometer\", version, token)"},{"path":"https://ramarty.github.io/rSocialWatcher/reference/get_fb_suggested_radius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Suggested Radius â€” get_fb_suggested_radius","text":"location Vector latitude longitude (c(lat, lon)). distance_unit Either \"kilometer\" \"mile\"; defaults \"kilometer\" version Facebook Marketing API version; example, \"v14.0\" token Facebook Marketing API token","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/get_fb_suggested_radius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Suggested Radius â€” get_fb_suggested_radius","text":"Dataframe suggested radius distance unit","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/get_fb_suggested_radius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Suggested Radius â€” get_fb_suggested_radius","text":"","code":"if (FALSE) { get_fb_suggested_radius(location = c(38.89831, -77.03658),                         version  = \"v14.0\",                         token    = \"TOKEN-HERE\") }"},{"path":"https://ramarty.github.io/rSocialWatcher/reference/map_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Parameters â€” map_param","title":"Map Parameters â€” map_param","text":"Map Parameters","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/map_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Parameters â€” map_param","text":"","code":"map_param(...)"},{"path":"https://ramarty.github.io/rSocialWatcher/reference/map_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Parameters â€” map_param","text":"... Vector list","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/merge_fb_with_param_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Facebook Data with Parameter Name â€” merge_fb_with_param_df","title":"Merge Facebook Data with Parameter Name â€” merge_fb_with_param_df","text":"Facebook data ID number variables, also useful name associated ID. Using dataframe Facebook results parameter dataframe (contains names ids), add names Facebook data. Deals cases multiple ids used.","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/merge_fb_with_param_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Facebook Data with Parameter Name â€” merge_fb_with_param_df","text":"","code":"merge_fb_with_param_df(fb_df, param_df, var)"},{"path":"https://ramarty.github.io/rSocialWatcher/reference/merge_fb_with_param_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Facebook Data with Parameter Name â€” merge_fb_with_param_df","text":"fb_df Facebook dataframe, returned query_fb_marketing_api() param_df Parameter dataframe, returned get_fb_parameter_ids() var Parameter variable name (fb_df)","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/merge_fb_with_param_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Facebook Data with Parameter Name â€” merge_fb_with_param_df","text":"Facebook dataframe, name variable","code":""},{"path":[]},{"path":"https://ramarty.github.io/rSocialWatcher/reference/query_fb_marketing_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Facebook Marketing API\n\nLocation\n\n\n â€” query_fb_marketing_api","title":"Query Facebook Marketing API\n\nLocation\n\n\n â€” query_fb_marketing_api","text":"Query Facebook Marketing API","code":""},{"path":[]},{"path":"https://ramarty.github.io/rSocialWatcher/reference/query_fb_marketing_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Facebook Marketing API\n\nLocation\n\n\n â€” query_fb_marketing_api","text":"","code":"query_fb_marketing_api(   location_unit_type,   lat_lon = NULL,   radius = NULL,   radius_unit = NULL,   location_keys = NULL,   location_types = \"home\",   locales = NULL,   interests = NULL,   behaviors = NULL,   college_years = NULL,   education_majors = NULL,   education_schools = NULL,   education_statuses = NULL,   family_statuses = NULL,   income = NULL,   industries = NULL,   work_positions = NULL,   work_employers = NULL,   excl_interests = NULL,   excl_behaviors = NULL,   excl_college_years = NULL,   excl_education_majors = NULL,   excl_education_schools = NULL,   excl_education_statuses = NULL,   excl_family_statuses = NULL,   excl_income = NULL,   excl_industries = NULL,   excl_work_positions = NULL,   excl_work_employers = NULL,   relationship_statuses = NULL,   life_events = NULL,   user_os = NULL,   wireless_carrier = NULL,   gender = c(1, 2),   age_min = 18,   age_max = 65,   flex_target = NULL,   version,   creation_act,   token,   sleep_time = 0.1,   show_result = F,   add_param_id_name_vars = F,   add_query = F,   add_query_hide_credentials = T )"},{"path":"https://ramarty.github.io/rSocialWatcher/reference/query_fb_marketing_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Facebook Marketing API\n\nLocation\n\n\n â€” query_fb_marketing_api","text":"location_unit_type Either \"coordinates\" (buffer around single point) \"country\" lat_lon Coordinates, c(lat, lon). example, c(38.90, -77.01) radius Radius around coordinate radius_unit Unit radius; either \"kilometer\" \"mile\" location_types Either: (1) \"home\" (people whose stated location Facebook profile \"current city\" area, valided IP), (2) \"recent\" (people whose recent location selected area, determined mobile device data), (3) \"travel_in\" (people whose recent location selected area 100 miles stated current city), (4) c(\"home\", \"recent\") (people either category) locales Locales ID. education_statuses Education status IDs. multiple, uses condition; example, education_statuses = c(9,10) yeild report either Master degree professional degree. See education_statuses Advanced Targeting Documentation see education status options. family_statuses Vector family status IDs. multiple, uses condition; example, family_statuses = c(6023080302983, 6023005681983) targets users parents preteens parents teenagers. Use get_fb_parameters(type = \"demographics\") get dataframe IDs descriptions. income Vector income IDs. multiple, uses condition; example, income = c(6107813553183, 6107813554583) targets users household income top 10%-25% 25%-50% ZIP codes (US). Use get_fb_parameters(type = \"demographics\") get dataframe IDs descriptions. industries Vector industries IDs. multiple, uses condition; example, industries = c(6008888980183, 6008888972183) targets users work sales legal services. Use get_fb_parameters(type = \"demographics\") get dataframe IDs descriptions. relationship_statuses Vector relationship status IDs. multiple, uses condition; example, relationship_statuses = c(3,4) targets married engaged. See relationship_statuses Advanced Targeting Documentation see relationship status ID options descriptions. life_events Vector life event IDs. multiple, uses condition; example, life_events = c(6005149512172, 6005149512172) targets users recently moved new job. Use get_fb_parameters(type = \"demographics\") get dataframe IDs descriptions. user_os User operating systems. multiple, uses condition; example user_os = ['iOS', 'Android'] targets use either iOS Android OS. See user_os Advanced Targeting Documentation additional details. wireless_carrier Wireless carriet. set Wifi, targets connecting via Wifi network. See wireless_carrier Advanced Targeting Documentation additional details. gender Genders target; 1 targets males 2 targets females Default . See gender Basic Targeting Documentation. age_min Minimum age. Default 18. See age_min Basic Targeting Documentation. age_max Maximum age. Default 65. See age_max Basic Targeting Documentation. version API version. e.g., \"v14.0\" creation_act Facebook creation act token Facebook API token sleep_time words show_result words add_query TRUE, add query text variable returned dataframe add_query_hide_credentials TRUE (add_query TRUE), hide creation_act token query text returned dataframe country_code Country ISO2; example, \"US\". behavior Vector behavior IDs. multiple, uses condition; example, behavior = c(6002714895372, 6008297697383) target users either frequent travelers returned travels 2 weeks ago. Use get_fb_parameters(type = \"behaviors\") get dataframe IDs descriptions. interest Vector interest IDs. multiple, uses condition; example, interest = c(6003349442621, 6003139266461) target users interested either entertainment movies. Use get_fb_parameters(type = \"interests\") get dataframe IDs descriptions.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ramarty.github.io/rSocialWatcher/reference/query_fb_marketing_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Facebook Marketing API\n\nLocation\n\n\n â€” query_fb_marketing_api","text":"Dataframe includes (1) daily monthly active users (2) parameter values","code":""},{"path":"https://ramarty.github.io/rSocialWatcher/reference/query_fb_marketing_api.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query Facebook Marketing API\n\nLocation\n\n\n â€” query_fb_marketing_api","text":"LOOP, USE LISTS. JUST LIST LOCATION TYPE.","code":""},{"path":[]}]
